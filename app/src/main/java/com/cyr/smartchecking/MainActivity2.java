package com.cyr.smartchecking;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.CheckBox;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.cyr.smartchecking.Model.ModelPerson;import java.util.ArrayList;import java.util.List;public class MainActivity2 extends AppCompatActivity implements View.OnClickListener {  ArrayList<ModelPerson> modelPersonList;  ArrayList<ModelPerson> selectionList ;  private Toolbar toolbar;  private RecyclerView recyclerView;  MyAdapter2 adapter;  boolean isContexualModeEnabled=false;  TextView itemCounter;  ImageButton btnBack;  int counter = 0;  private EditText editTextSearch;  private ImageView searchIcon;  private ImageView filter;  @Override  protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main2);    toolbar=findViewById(R.id.toolBar);    setSupportActionBar(toolbar);    //Initilisation des vue pour la barre de recherche    editTextSearch = findViewById(R.id.editTextSearch);    searchIcon = findViewById(R.id.searchIcon);    filter = findViewById(R.id.filter);    searchIcon.setOnClickListener(new View.OnClickListener(){      @Override      public void onClick(View v) {        performSearch();      }    });    itemCounter=findViewById(R.id.itemCounter);    btnBack=findViewById(R.id.btnBack);    btnBack.setOnClickListener(new View.OnClickListener() {      @Override      public void onClick(View v) {        onBackPressed();      }    });    modelPersonList = new ArrayList<>();    selectionList = new ArrayList<>();    modelPersonList.add(new ModelPerson("Pierre","BEHANZIN" ,"Etudiant", "Manuel", "Visite", "CNI", "9h", "19h", R.drawable.user_profile, "1", "CERCO"));    modelPersonList.add(new ModelPerson("John", "DONA","Student", "Manual", "Visit", "ID1", "8h", "18h", R.drawable.user_profile, "1", "CERCO"));    modelPersonList.add(new ModelPerson("Alice","AZE", "Employee", "Auto", "Meeting", "ID2", "10h", "20h", R.drawable.user_profile, "2", "ABC Company"));    modelPersonList.add(new ModelPerson("Bob","AMAZING","Visitor", "Manual", "Appointment", "ID3", "11h", "21h", R.drawable.user_profile, "1", "XYZ Organization"));    modelPersonList.add(new ModelPerson("Eva","BIGMAN", "Student", "Auto", "Research", "ID4", "9h", "17h", R.drawable.user_profile, "1", "University"));    modelPersonList.add(new ModelPerson("Mike","COOLMAN", "Employee", "Auto", "Conference", "ID5", "8h", "16h", R.drawable.user_profile, "2", "Tech Corp"));    modelPersonList.add(new ModelPerson("Sophie", "DOUGLAS","Visitor", "Manual", "Event", "ID6", "10h", "22h", R.drawable.user_profile, "1", "Event Planner"));    modelPersonList.add(new ModelPerson("Chris","ENY", "Student", "Auto", "Study", "ID7", "9h", "18h", R.drawable.user_profile, "1", "College"));    modelPersonList.add(new ModelPerson("Emma", "FINISH","Employee", "Manual", "Training", "ID8", "8h", "17h", R.drawable.user_profile, "2", "Training Institute"));    recyclerView = findViewById(R.id.recycler2);    adapter = new MyAdapter2(modelPersonList,MainActivity2.this);    recyclerView.setLayoutManager(new LinearLayoutManager(this));    recyclerView.setAdapter(adapter);  }  @Override  public boolean onCreateOptionsMenu(Menu menu) {    getMenuInflater().inflate(R.menu.menu_selection, menu);    return true;  }  @Override  public void onClick(View v) {    isContexualModeEnabled=true;    toolbar.getMenu().clear();    toolbar.inflateMenu(R.menu.contexual_menu);    RemoveContextualActionMode();    adapter.notifyDataSetChanged();  }  public void MakeSelection(View v, int adapterPosition) {    if (((CheckBox)v).isChecked()){      selectionList.add(modelPersonList.get(adapterPosition));      counter++;    }    else {      selectionList.remove(modelPersonList.get(adapterPosition));      counter--;    }    UpdateCounter();    // Si la suppression a été effectuée, réinitialiser l'état    if (counter == 0) {      resetState();    } else {      toolbar.inflateMenu(R.menu.contexual_menu);    }  }  public void  UpdateCounter()  {    itemCounter.setText(counter+" selection");  }  @Override  public boolean onOptionsItemSelected(@NonNull MenuItem item) {    if (item.getItemId()==R.id.delete){      adapter.RemoveItem(selectionList);      RemoveContextualActionMode();    }    return true;  }  private void RemoveContextualActionMode() {    isContexualModeEnabled=false;    toolbar.getMenu().clear();    toolbar.inflateMenu(R.menu.contexual_menu);    counter=0;    selectionList.clear();    adapter.notifyDataSetChanged();  }  public void resetState() {    isContexualModeEnabled = false;    counter = 0;    selectionList.clear();    adapter.notifyDataSetChanged();    // Réinitialiser le menu    toolbar.getMenu().clear();    toolbar.inflateMenu(R.menu.menu_selection);    itemCounter.setText("0 selection");  }  private void performSearch() {    String searchText = editTextSearch.getText().toString().toLowerCase().trim();    List<ModelPerson> filteredList = new ArrayList<>();    for (ModelPerson modelPerson : modelPersonList) {      if (modelPerson.getName().toLowerCase().contains(searchText)) {        filteredList.add(modelPerson);      }      if (modelPerson.getSname().toLowerCase().contains(searchText)){        filteredList.add(modelPerson);      }    }    if (filteredList.isEmpty()) {      Toast.makeText(this, "Aucune donnée trouvée", Toast.LENGTH_SHORT).show();    } else {      adapter.setfilteredList(filteredList);    }  }}// toolbar.inflateMenu(R.menu.contexual_menu);